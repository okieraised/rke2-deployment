# -- Override the name of the chart
nameOverride: ""
# -- Override the full name of the chart
fullnameOverride: ""
# -- Override the namespace of the chart
namespaceOverride: ""

###
# -- Type of the CNPG database. Available types:
# * `postgresql`
# * `postgis`
# * `timescaledb`
type: postgresql

version:
  # -- PostgreSQL major version to use
  postgresql: "17"

###
# -- Cluster mode of operation. Available modes:
# * `standalone` - default mode. Creates new or updates an existing CNPG cluster.
# * `replica` - Creates a replica cluster from an existing CNPG cluster. # TODO
# * `recovery` - Same as standalone but creates a cluster from a backup, object store or via pg_basebackup.
mode: standalone

cluster:
  # -- Number of instances
  instances: 1

  # -- Name of the container image, supporting both tags (<image>:<tag>) and digests for deterministic and repeatable deployments:
  # <image>:<tag>@sha256:<digestValue>
  imageName: ""  # Default value depends on type (postgresql/postgis/timescaledb)

  # -- Reference to `ImageCatalog` of `ClusterImageCatalog`, if specified takes precedence over `cluster.imageName`
  imageCatalogRef: {}
    # kind: ImageCatalog
  # name: postgresql

  # -- Image pull policy. One of Always, Never or IfNotPresent. If not defined, it defaults to IfNotPresent. Cannot be updated.
  # More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
  imagePullPolicy: IfNotPresent

  # -- The list of pull secrets to be used to pull the images.
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-LocalObjectReference
  imagePullSecrets: []

  storage:
    size: 100Gi
    storageClass: "local-path"

  walStorage:
    enabled: true
    size: 10Gi
    storageClass: "local-path"

  # -- The UID of the postgres user inside the image, defaults to 26
  postgresUID: -1

  # -- The GID of the postgres user inside the image, defaults to 26
  postgresGID: -1

  # -- Customization of service definitions. Please refer to https://cloudnative-pg.io/documentation/1.24/service_management/
  services: {}

  # -- Resources requirements of every generated Pod.
  # Please refer to https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ for more information.
  # We strongly advise you use the same setting for limits and requests so that your cluster pods are given a Guaranteed QoS.
  # See: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/
  resources: {}
    # limits:
    #   cpu: 2000m
    #   memory: 8Gi
    # requests:
    #   cpu: 2000m
  #   memory: 8Gi

  priorityClassName: ""

  # -- Method to follow to upgrade the primary server during a rolling update procedure, after all replicas have been
  # successfully updated. It can be switchover (default) or restart.
  primaryUpdateMethod: switchover

  # -- Strategy to follow to upgrade the primary server during a rolling update procedure, after all replicas have been
  # successfully updated: it can be automated (unsupervised - default) or manual (supervised)
  primaryUpdateStrategy: unsupervised

  # -- The instances' log level, one of the following values: error, warning, info (default), debug, trace
  logLevel: "info"

  # -- Affinity/Anti-affinity rules for Pods.
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-AffinityConfiguration
  affinity:
    topologyKey: topology.kubernetes.io/zone

  # -- The configuration for the CA and related certificates.
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-CertificatesConfiguration
  certificates: {}

  # -- When this option is enabled, the operator will use the SuperuserSecret to update the postgres user password.
  # If the secret is not present, the operator will automatically create one.
  # When this option is disabled, the operator will ignore the SuperuserSecret content, delete it when automatically created,
  # and then blank the password of the postgres user by setting it to NULL.
  enableSuperuserAccess: true
  superuserSecret: "postgres-superuser"

  # -- Allow to disable PDB, mainly useful for upgrade of single-instance clusters or development purposes
  # See: https://cloudnative-pg.io/documentation/current/kubernetes_upgrade/#pod-disruption-budgets
  enablePDB: true

  # -- This feature enables declarative management of existing roles, as well as the creation of new roles if they are not
  # already present in the database.
  # See: https://cloudnative-pg.io/documentation/current/declarative_role_management/
  roles:
    - name: keycloak
      ensure: present
      login: true
      superuser: false
      createdb: true
      passwordSecret:
        name: keycloak-db-user
    # - name: dante
    #   ensure: present
    #   comment: Dante Alighieri
    #   login: true
    #   superuser: false
    #   inRoles:
    #     - pg_monitor
  #     - pg_signal_backend

  postgresql:
    # -- PostgreSQL configuration options (postgresql.conf)
    parameters:
      max_connections: "5000"
      shared_buffers: "512MB"
    # -- Quorum-based Synchronous Replication
    synchronous: {}
      # method: any
    # number: 1
    # -- PostgreSQL Host Based Authentication rules (lines to be appended to the pg_hba.conf file)
    pg_hba: []
    # - host all all 10.244.0.0/16 md5
    # -- PostgreSQL User Name Maps rules (lines to be appended to the pg_ident.conf file)
    pg_ident: []
    # - mymap   /^(.*)@mydomain\.com$      \1
    # -- Lists of shared preload libraries to add to the default ones
    shared_preload_libraries: []
    # - pgaudit
    # -- PostgreSQL LDAP configuration (see https://cloudnative-pg.io/documentation/current/postgresql_conf/#ldap-configuration)
    ldap: {}
      # https://cloudnative-pg.io/documentation/1.24/postgresql_conf/#ldap-configuration
      # server: 'openldap.default.svc.cluster.local'
      # bindSearchAuth:
      # baseDN: 'ou=org,dc=example,dc=com'
      # bindDN: 'cn=admin,dc=example,dc=com'
      # bindPassword:
      # name: 'ldapBindPassword'
      # key: 'data'
    # searchAttribute: 'uid'


  # -- BootstrapInitDB is the configuration of the bootstrap process when initdb is used.
  # See: https://cloudnative-pg.io/documentation/current/bootstrap/
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-bootstrapinitdb
  initdb:
    database: keycloak
    owner: keycloak
    secret:
      name: keycloak-db-user

    # database: app
    # owner: "" # Defaults to the database name
    # secret:
    #   name: "" # Name of the secret containing the initial credentials for the owner of the user database. If empty a new secret will be created from scratch
    # options: []
    # encoding: UTF8
    # postInitSQL:
    #   - CREATE EXTENSION IF NOT EXISTS vector;
    # postInitApplicationSQL: []
  # postInitTemplateSQL: []

  # -- Configure the metadata of the generated service account
  serviceAccountTemplate: {}

  additionalLabels: {}
  annotations: {}


backups:
  # -- You need to configure backups manually, so backups are disabled by default.
  enabled: false

# -- List of PgBouncer poolers
poolers:
  - name: rw
    type: rw
    poolMode: transaction
    instances: 1
    parameters:
      max_client_conn: "5000"
      default_pool_size: "50"
  - name: ro
    type: ro
    poolMode: transaction
    instances: 1
    parameters:
      max_client_conn: "5000"
      default_pool_size: "50"